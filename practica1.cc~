//**************************************************************************
// Práctica 1 usando objetos
//**************************************************************************
#include <GL/gl.h>
#include <GL/glut.h>
#include <ctype.h>
#include <math.h>
#include <vector>
#include "objetos.h"
#include "file_ply_stl.h"


using namespace std;

// variables que controlan la ventana y la transformacion de perspectiva
GLfloat Size_x,Size_y,Front_plane,Back_plane;

// variables que definen la posicion de la camara en coordenadas polares
GLfloat Observer_distance;
GLfloat Observer_angle_x;
GLfloat Observer_angle_y;
char modo=' ';
char figura=' ';
_cubo cub (8);
_vertex3f v(2.0,1.1,1.0);
//_obj_barrido pen(1,v); descomentar
_piramide tetraedro(1,1);
_ply obj_ply;//creacion del ply
_obj_revolucion obj_rev (4);
// variables que determninan la posicion y tamaño de la ventana X
int Window_x=50,Window_y=50,Window_width=450,Window_high=450;

// objetos


//**************************************************************************
//
//***************************************************************************

void clean_window()
{

glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
}


//**************************************************************************
// Funcion para definir la transformación de proyeccion
//***************************************************************************

void change_projection()
{

glMatrixMode(GL_PROJECTION);
glLoadIdentity();

// formato(x_minimo,x_maximo, y_minimo, y_maximo,plano_delantero, plano_traser)
//  plano_delantero>0  plano_trasero>PlanoDelantero)
glFrustum(-Size_x,Size_x,-Size_y,Size_y,Front_plane,Back_plane);
}

//**************************************************************************
// Funcion para definir la transformación de vista (posicionar la camara)
//***************************************************************************

void change_observer()//OK
{

// posicion del observador
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glTranslatef(0,0,-Observer_distance);
glRotatef(Observer_angle_x,1,0,0);
glRotatef(Observer_angle_y,0,1,0);
}

//**************************************************************************
// Funcion que dibuja los ejes utilizando la primitiva grafica de lineas
//***************************************************************************

void draw_axis()
{

//glDisable(GL_LIGHTING);//**
//glLineWidth(1);//**
glBegin(GL_LINES);
// eje X, color rojo
glColor3f(1,0,0);
glVertex3f(-AXIS_SIZE,0,0);
glVertex3f(AXIS_SIZE,0,0);
// eje Y, color verde
glColor3f(0,1,0);
glVertex3f(0,-AXIS_SIZE,0);
glVertex3f(0,AXIS_SIZE,0);
// eje Z, color azul
glColor3f(0,0,1);
glVertex3f(0,0,-AXIS_SIZE);
glVertex3f(0,0,AXIS_SIZE);
glEnd();
}


//**************************************************************************
// Funcion que dibuja los objetos
//***************************************************************************

void draw_objects()
{
	//pen.draw_puntos(1.0,0.0,1.0,7); descomentar
	if(modo=='p'){
		if(figura=='1'){
			cub.draw_puntos(1.0,0.0,1.0,5);
		}
		else if(figura=='2'){
			tetraedro.draw_puntos(1.0,0.0,1.0,5);
		}
   else if(figura=='3')
			obj_ply.draw_puntos(1.0,0.0,1.0,5);
      else if(figura=='4')
  			obj_rev.draw_puntos(1.0,0.0,1.0,5);
	}else if(modo=='e'){
					if(figura=='1'){
						cub.draw_aristas(1.0,0.0,1.0,5);
					}
					else if(figura=='2'){
						tetraedro.draw_aristas(1.0,0.0,1.0,5);
					}
          else if(figura=='3')
      			     obj_ply.draw_aristas(1.0,0.0,1.0,5);
            else if(figura=='4')
        			     obj_rev.draw_aristas(1.0,0.0,1.0,5);
	}else if(modo=='s'){
					if(figura=='1'){
						cub.draw_solido(0.0,1.0,0.0);
					}
					 else if(figura=='2'){
						tetraedro.draw_solido(0.0,1.0,0.0);
					}
          else if(figura=='3')
      			     obj_ply.draw_solido(0.0,1.0,0.0);
            else if(figura=='4')
        			     obj_rev.draw_solido(0.0,1.0,0.0);
		}else if(modo=='a'){
						if(figura=='1'){
							cub.draw_solido_ajedrez(1.0,0.0,1.0,0.0,0.0,0.0);
						}
						else if(figura=='2'){
							tetraedro.draw_solido_ajedrez(1.0,0.0,1.0,0.0,0.0,0.0);
						}
            else if(figura=='3')
        			     obj_ply.draw_solido_ajedrez(1.0,0.0,1.0,0.0,0.0,0.0);
              else if(figura=='4')
          			     obj_rev.draw_solido_ajedrez(1.0,0.0,1.0,0.0,0.0,0.0);
					}

}


//**************************************************************************
//
//***************************************************************************

void draw(void)
{
clean_window();
change_observer();
draw_axis();
draw_objects();//lamada a dibujar objetos
glutSwapBuffers();
}



//***************************************************************************
// Funcion llamada cuando se produce un cambio en el tamaño de la ventana
//
// el evento manda a la funcion:
// nuevo ancho
// nuevo alto
//***************************************************************************

void change_window_size(int Ancho1,int Alto1)
{
float Aspect_ratio;

Aspect_ratio=(float) Alto1/(float )Ancho1;
Size_y=Size_x*Aspect_ratio;
change_projection();
glViewport(0,0,Ancho1,Alto1);
glutPostRedisplay();
}

//***************************************************************************
// Funcion llamada cuando se aprieta una tecla normal
//
// el evento manda a la funcion:
// codigo de la tecla
// posicion x del raton
// posicion y del raton
//***************************************************************************

void normal_key(unsigned char Tecla1,int x,int y)
{
if (toupper(Tecla1)=='Q') exit(0);
if (Tecla1=='p'){
		modo='p';
		std::cout << "\t--modo Punto seleccionado--" << std::endl;


	}
else if (Tecla1=='e'){
		modo='e';
		std::cout << "\t--modo Alambre seleccionado--" << std::endl;

	}else if (Tecla1=='s'){
			modo='s';
			std::cout << "\t--modo Solido seleccionado--" << std::endl;


		}else if (Tecla1=='a'){
				modo='a';
				std::cout << "\t--modo Ajedrez seleccionado--" << std::endl;


			}else if(Tecla1=='1'){
            figura='1';
            std::cout << "\t--figura cubo seleccionada--" << std::endl;
            }
       else if(Tecla1=='2'){
              figura='2';
              std::cout << "\t--figura tetraedro seleccionada--" << std::endl;
            }
            else if(Tecla1=='3'){
                        figura='3';
                        std::cout << "\t--figura PLY seleccionada--" << std::endl;
            }
      else if(Tecla1=='4'){
              figura='4';
              std::cout << "\t--figura revolucion PLY seleccionada--" << std::endl;
      }
    glutPostRedisplay();
}

//***************************************************************************
// Funcion llamada cuando se aprieta una tecla especial
//
// el evento manda a la funcion:
// codigo de la tecla
// posicion x del raton
// posicion y del raton

//***************************************************************************

void special_key(int Tecla1,int x,int y)
{

switch (Tecla1){
	case GLUT_KEY_LEFT:Observer_angle_y--;break;
	case GLUT_KEY_RIGHT:Observer_angle_y++;break;
	case GLUT_KEY_UP:Observer_angle_x--;break;
	case GLUT_KEY_DOWN:Observer_angle_x++;break;
	case GLUT_KEY_PAGE_UP:Observer_distance*=1.2;break;
	case GLUT_KEY_PAGE_DOWN:Observer_distance/=1.2;break;
	}
glutPostRedisplay();
}



//***************************************************************************
// Funcion de incializacion
//***************************************************************************

void initialize(void)
{
// se inicalizan la ventana y los planos de corte
Size_x=0.5;
Size_y=0.5;
Front_plane=1;
Back_plane=10000;

// se incia la posicion del observador, en el eje z
Observer_distance=300*Front_plane;
Observer_angle_x=0;
Observer_angle_y=0;

// se indica cual sera el color para limpiar la ventana	(r,v,a,al)
// blanco=(1,1,1,1) rojo=(1,0,0,1), ...
glClearColor(1,1,1,1);
//para eliminar partes ocultas
 //glEnable(GL_CULL_FACE);
// se habilita el z-bufer
glEnable(GL_DEPTH_TEST);
change_projection();
glViewport(0,0,Window_width,Window_high);

}


//***************************************************************************
// Programa principal
//
// Se encarga de iniciar la ventana, asignar las funciones e comenzar el
// bucle de eventos
//***************************************************************************

int main(int argc, char **argv)
{

// se llama a la inicialización de glut
glutInit(&argc, argv);

// se indica las caracteristicas que se desean para la visualización con OpenGL
// Las posibilidades son:
// GLUT_SIMPLE -> memoria de imagen simple
// GLUT_DOUBLE -> memoria de imagen doble
// GLUT_INDEX -> memoria de imagen con color indizado
// GLUT_RGB -> memoria de imagen con componentes rojo, verde y azul para cada pixel
// GLUT_RGBA -> memoria de imagen con componentes rojo, verde, azul y alfa para cada pixel
// GLUT_DEPTH -> memoria de profundidad o z-bufer
// GLUT_STENCIL -> memoria de estarcido

glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

// posicion de la esquina inferior izquierdad de la ventana
glutInitWindowPosition(Window_x,Window_y);

// tamaño de la ventana (ancho y alto)
glutInitWindowSize(Window_width,Window_high);


// llamada para crear la ventana, indicando el titulo (no se visualiza hasta que se llama
// al bucle de eventos)
glutCreateWindow("PRACTICA 1 - Antonio Guzman Martin");


// asignación de la funcion llamada "dibujar" al evento de dibujo
glutDisplayFunc(draw);
// asignación de la funcion llamada "change_window_size" al evento correspondiente
glutReshapeFunc(change_window_size);
// asignación de la funcion llamada "normal_key" al evento correspondiente
glutKeyboardFunc(normal_key);
//para pintar la figura presionada

// asignación de la funcion llamada "tecla_Especial" al evento correspondiente
glutSpecialFunc(special_key);

// funcion de inicialización
initialize();

// inicio del bucle de eventos
glutMainLoop();
return 0;
}
